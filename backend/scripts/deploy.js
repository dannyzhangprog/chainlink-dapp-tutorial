// We require the Hardhat Runtime Environment explicitly here. This is optional
// but useful for running the script in a standalone fashion through `node <script>`.
//
// You can also run a script with `npx hardhat run <script>`. If you do that, Hardhat
// will compile your contracts, add the Hardhat Runtime Environment's members to the
// global scope, and execute the script.
const hre = require("hardhat");

const CONTRACT_NAME = "PriceConsumerV3";

async function main() {

    // Ë¥¶Êà∑‰ø°ÊÅØÈ™åËØÅ
    const [deployer] = await ethers.getSigners();
    console.log(`\nüî® ‰ΩøÁî®ÈÉ®ÁΩ≤Ë¥¶Êà∑: ${deployer.address}`);

    // ‰ΩøÁî® provider Ëé∑Âèñ‰ΩôÈ¢ù
    const balance = await ethers.provider.getBalance(deployer.address);
    console.log(`üí∞ Ë¥¶Êà∑‰ΩôÈ¢ù: ${ethers.formatEther(balance)} ETH`); // Ê≥®ÊÑè formatEther ÁöÑ‰ΩøÁî®ÊñπÂºèÂèòÂåñ

    // Ëé∑ÂèñÂêàÁ∫¶Â∑•ÂéÇ
    console.log(`\nüöÄ ÂºÄÂßãÈÉ®ÁΩ≤ ${CONTRACT_NAME}...`);
    const ContractFactory = await hre.ethers.getContractFactory(CONTRACT_NAME);

    // ÈÉ®ÁΩ≤ÂêàÁ∫¶Âπ∂Á≠âÂæÖÂÆåÊàê
    const contract = await ContractFactory.deploy();
    await contract.waitForDeployment();  // ÊõøÊç¢Âéü .deployed()

    // Ëé∑ÂèñÈÉ®ÁΩ≤ÂêéÁöÑÂêàÁ∫¶Âú∞ÂùÄ
    console.log(`‚è≥ Á≠âÂæÖ‰∫§ÊòìÁ°ÆËÆ§...`);
    await contract.waitForDeployment(); // ‰ΩøÁî®Êñ∞ÁöÑÁ≠âÂæÖÊñπÊ≥ï
    console.log(`‚úÖ ÂêàÁ∫¶ÊàêÂäüÈÉ®ÁΩ≤Ëá≥Âú∞ÂùÄ: ${contract.target}`); // Ê≥®ÊÑè .target Êõø‰ª£ .address

    // // verify contract
    // if (hre.network.config.chainId == 11155111 && process.env.ETHERSCAN_API_KEY) {
    //     console.log("Waiting for 5 confirmations")
    //     await contract.deploymentTransaction().wait(5)
    //     await verifyContract(contract.target)
    // } else {
    //     console.log("verification skipped..")
    // }
}

async function verifyContract(contractAddr) {
    await hre.run("verify:verify", {
        address: contractAddr
    });
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
    console.error("‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:", error);
    process.exitCode = 1;
});